import { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import { selectUser } from '../../redux/authSlice/authSelectors';
import { Container } from '../../components/Container/Container';
import s from './AnalyticsPage.module.css';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, Legend } from 'recharts';
import { LoaderPage } from '../../components/Loader/LoaderPage/LoaderPage';
import { api } from '../../redux/api';

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];

const AnalyticsPage = () => {
  const user = useSelector(selectUser);
  const [analytics, setAnalytics] = useState(null);
  const [loading, setLoading] = useState(true);
  const [dateRange, setDateRange] = useState({ startDate: '', endDate: '' });

  const fetchAnalytics = async () => {
    setLoading(true);
    try {
      console.log('üîç Fetching analytics with:', {
        userId: user?._id,
        hasToken: !!api.defaults.headers.common.Authorization,
        tokenPreview: api.defaults.headers.common.Authorization?.substring(0, 40)
    });

      const params = {};
      if (dateRange.startDate) params.startDate = dateRange.startDate;
      if (dateRange.endDate) params.endDate = dateRange.endDate;

      const response = await api.get('/analytics/teacher/dashboard', { params });
      console.log('‚úÖ Analytics fetched:', response.data);

      setAnalytics(response.data);
    } catch (error) {
      console.error('Analytics fetch error:', {
      status: error.response?.status,
      message: error.response?.data?.message,
      fullError: error
    });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user) {
      fetchAnalytics();
    }
  }, [user]);

  if (loading) return <LoaderPage />;
  if (!analytics) return <Container><p>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</p></Container>;

  // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
  const trafficData = Object.entries(analytics.trafficSources).map(([key, value]) => ({
    name: key === 'direct' ? '–ü—Ä—è–º–∏–π –ø–µ—Ä–µ—Ö—ñ–¥' : key,
    value,
  }));

  const deviceData = Object.entries(analytics.deviceBreakdown).map(([key, value]) => ({
    name: key === 'mobile' ? '–ú–æ–±—ñ–ª—å–Ω–∏–π' : key === 'desktop' ? '–î–µ—Å–∫—Ç–æ–ø' : '–ü–ª–∞–Ω—à–µ—Ç',
    value,
  }));

  const topArticlesData = analytics.topArticles.slice(0, 5).map((article) => ({
    name: article.title.length > 30 ? article.title.substring(0, 30) + '...' : article.title,
    views: article.views,
    favorites: article.addedToFavorites,
  }));

  return (
    <div className={s.analyticsPage}>
      <Container>
        <h1 className={s.title}>–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –º–æ—ó—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤</h1>

        {/* –Ü–Ω—Ñ–æ–±–ª–æ–∫ –¥–∞—à–±–æ—Ä–¥—É */}
        <div className={s.infoHeader}>
          <h2>–©–æ –ø–æ–∫–∞–∑—É—î –¥–∞—à–±–æ—Ä–¥:</h2>
          <ul className={s.infoList}>
            <li><strong>–í—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤</strong> ‚Äì –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–µ—Å—ñ–π, –¥–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞–ª–∏ –≤–∞—à—ñ —Å—Ç–∞—Ç—Ç—ñ</li>
            <li><strong>–ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–æ–∫</strong> ‚Äì –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏</li>
            <li><strong>–í –æ–±—Ä–∞–Ω—ñ</strong> ‚Äì —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –≤–∞—à—ñ —Å—Ç–∞—Ç—Ç—ñ –¥–æ–¥–∞–ª–∏ –≤ –æ–±—Ä–∞–Ω—ñ</li>
            <li><strong>–ù–æ–≤–∏—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤</strong> ‚Äì —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –Ω–∞ –≤–∞—Å –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –∑–∞ –ø–µ—Ä—ñ–æ–¥</li>
            <li><strong>–ö–æ–Ω–≤–µ—Ä—Å—ñ—è</strong> ‚Äì –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤, —è–∫—ñ –¥–æ–¥–∞–ª–∏ —Å—Ç–∞—Ç—Ç—é –≤ –æ–±—Ä–∞–Ω—ñ</li>
            <li><strong>–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –Ω–∞ —Å–∞–π—Ç—ñ</strong> ‚Äì —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø—Ä–æ–≤–æ–¥—è—Ç—å –Ω–∞ —Å–∞–π—Ç—ñ</li>
            <li><strong>–î–∂–µ—Ä–µ–ª–∞ —Ç—Ä–∞—Ñ—ñ–∫—É</strong> ‚Äì –∑–≤—ñ–¥–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ (direct, Instagram, Facebook —Ç–æ—â–æ)</li>
            <li><strong>–ü—Ä–∏—Å—Ç—Ä–æ—ó</strong> ‚Äì –∑ —è–∫–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –∑–∞—Ö–æ–¥—è—Ç—å (–º–æ–±—ñ–ª—å–Ω–∏–π, –¥–µ—Å–∫—Ç–æ–ø, –ø–ª–∞–Ω—à–µ—Ç)</li>
            <li><strong>–¢–æ–ø —Å—Ç–∞—Ç–µ–π</strong> ‚Äì –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –≤–∞—à—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞–º–∏</li>
          </ul>
        </div>

        {/* –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–∞–º–∏ */}
        <div className={s.filters}>
          <div className={s.filterGroup}>
            <label>–í—ñ–¥:</label>
            <input
              type="date"
              value={dateRange.startDate}
              onChange={(e) => setDateRange({ ...dateRange, startDate: e.target.value })}
            />
          </div>
          <div className={s.filterGroup}>
            <label>–î–æ:</label>
            <input
              type="date"
              value={dateRange.endDate}
              onChange={(e) => setDateRange({ ...dateRange, endDate: e.target.value })}
            />
          </div>
          <button onClick={fetchAnalytics} className={s.filterBtn}>
            –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏
          </button>
        </div>

        {/* –ó–∞–≥–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ */}
        <div className={s.metricsGrid}>
          <MetricCard
            title="–í—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤"
            value={analytics.totalVisitors}
            icon="üë•"
          />
          <MetricCard
            title="–ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–æ–∫"
            value={analytics.totalPageViews}
            icon="üìÑ"
          />
          <MetricCard
            title="–í –æ–±—Ä–∞–Ω—ñ"
            value={analytics.favoritesCount}
            icon="‚≠ê"
          />
          <MetricCard 
          title="–ù–æ–≤–∏—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤"
          value={analytics.followersCount}
          icon="üë§" />
          <MetricCard
            title="–ö–æ–Ω–≤–µ—Ä—Å—ñ—è"
            value={`${analytics.conversionRate}%`}
            icon="üìà"
          />
          <MetricCard
            title="–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –Ω–∞ —Å–∞–π—Ç—ñ"
            value={`${Math.round(analytics.avgSessionDuration / 60)} —Ö–≤`}
            icon="‚è±Ô∏è"
          />
        </div>

        {/* –ì—Ä–∞—Ñ—ñ–∫–∏ */}
        <div className={s.chartsGrid}>
          {/* –î–∂–µ—Ä–µ–ª–∞ —Ç—Ä–∞—Ñ—ñ–∫—É */}
          <div className={s.chartCard}>
            <h3>–î–∂–µ—Ä–µ–ª–∞ —Ç—Ä–∞—Ñ—ñ–∫—É</h3>
            {trafficData.length > 0 ? (
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={trafficData}
                    dataKey="value"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    outerRadius={100}
                    label
                  >
                    {trafficData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            ) : (
              <p>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö</p>
            )}
          </div>

          {/* –ü—Ä–∏—Å—Ç—Ä–æ—ó */}
          <div className={s.chartCard}>
            <h3>–ü—Ä–∏—Å—Ç—Ä–æ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</h3>
            {deviceData.length > 0 ? (
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={deviceData}
                    dataKey="value"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    outerRadius={100}
                    label
                  >
                    {deviceData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            ) : (
              <p>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö</p>
            )}
          </div>
        </div>

        {/* –¢–æ–ø —Å—Ç–∞—Ç–µ–π */}
        <div className={s.chartCard}>
          <h3>–¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π</h3>
          {topArticlesData.length > 0 ? (
            <ResponsiveContainer width="100%" height={400}>
              <BarChart data={topArticlesData}>
                <XAxis dataKey="name" angle={-45} textAnchor="end" height={120} />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="views" fill="#8884d8" name="–ü–µ—Ä–µ–≥–ª—è–¥–∏" />
                <Bar dataKey="favorites" fill="#82ca9d" name="–í –æ–±—Ä–∞–Ω—ñ" />
              </BarChart>
            </ResponsiveContainer>
          ) : (
            <p>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö</p>
          )}
        </div>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è —Å—Ç–∞—Ç–µ–π */}
        <div className={s.articlesTable}>
          <h3>–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—Ç—è—Ö</h3>
          <table>
            <thead>
              <tr>
                <th>–°—Ç–∞—Ç—Ç—è</th>
                <th>–ü–µ—Ä–µ–≥–ª—è–¥–∏</th>
                <th>–í –æ–±—Ä–∞–Ω—ñ</th>
                <th>–ö–æ–Ω–≤–µ—Ä—Å—ñ—è</th>
              </tr>
            </thead>
            <tbody>
              {analytics.topArticles.map((article) => (
                <tr key={article.title}>
                  <td>
                    <div className={s.articleCell}>
                      {article.img && (
                        <img src={article.img} alt={article.title} className={s.articleImg} />
                      )}
                      <span>{article.title}</span>
                    </div>
                  </td>
                  <td>{article.views}</td>
                  <td>{article.addedToFavorites}</td>
                  <td>
                    {article.views > 0
                      ? ((article.addedToFavorites / article.views) * 100).toFixed(1)
                      : 0}%
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </Container>
    </div>
  );
};

const MetricCard = ({ title, value, icon }) => (
  <div className={s.metricCard}>
    <div className={s.metricIcon}>{icon}</div>
    <div className={s.metricContent}>
      <p className={s.metricTitle}>{title}</p>
      <p className={s.metricValue}>{value}</p>
    </div>
  </div>
);

export default AnalyticsPage;